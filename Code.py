# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nqmrGZypPE7MTc7Sz3jKbnnmokcNJxTu
"""



import pandas as pd

# Load the CSV file into a DataFrame
file_path = '/content/Ashish Dataset.csv'  # Replace with your file path
df = pd.read_csv(file_path)

df.head()

# Remove any rows with NaN values
df_cleaned = df.dropna()

df.columns

# Assuming  coordinates should be within the range [0, 1000]
df_cleaned = df_cleaned[(df_cleaned['x'] >= 0) & (df_cleaned['x'] <= 1000) &
                        (df_cleaned['y'] >= 0) & (df_cleaned['y'] <= 1000)]

import numpy as np

# Discretize the data into a 1000x1000 matrix
matrix_size = 1000
x_discretized = (df_cleaned['x'] * (matrix_size / 1000)).astype(int)
y_discretized = (df_cleaned['y'] * (matrix_size / 1000)).astype(int)

# Create a 2D sparse boolean matrix
sparse_matrix = np.zeros((matrix_size, matrix_size), dtype=bool)
sparse_matrix[x_discretized, y_discretized] = True

sparse_matrix

rotated_matrix = np.rot90(sparse_matrix)

flipped_matrix = np.fliplr(sparse_matrix)

inverted_matrix = np.rot90(flipped_matrix)

rotated_matrix

sparse_coords = np.column_stack(np.where(sparse_matrix))
rotated_coords = np.column_stack(np.where(rotated_matrix))
flipped_coords = np.column_stack(np.where(flipped_matrix))
inverted_coords = np.column_stack(np.where(inverted_matrix))

import matplotlib.pyplot as plt

# Plot the original coordinates
plt.scatter(sparse_coords[:, 1], sparse_coords[:, 0], c='red', s=1)
plt.title('Original Image')
plt.gca().invert_yaxis()
plt.show()

# Plot the rotated coordinates
plt.scatter(rotated_coords[:, 1], rotated_coords[:, 0], c='red', s=1)
plt.title('Rotated Image')
plt.gca().invert_yaxis()
plt.show()

# Plot the flipped coordinates
plt.scatter(flipped_coords[:, 1], flipped_coords[:, 0], c='red', s=1)
plt.title('Flipped Image')
plt.gca().invert_yaxis()
plt.show()

# Plot the inverted coordinates
plt.scatter(inverted_coords[:, 1], inverted_coords[:, 0], c='red', s=1)
plt.title('Inverted Image')
plt.gca().invert_yaxis()
plt.show()